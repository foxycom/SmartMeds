apply plugin: 'com.android.application'

// Load Jacoco Only if needed
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco build file: jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}


// General switch for tests types this control report generation but not yet unit test selection - TODO Make this a flag
def carvedTests = project.hasProperty('carvedTests')// ? project.getProperty('carvedTests') : false //Default value false

def carvedTestSrcDir = "src/carvedTest"
def testReportPrefix = "${buildDir}/carvedTest/testExecution"
def coverageReportPrefix = "${buildDir}/carvedTest/coverage"

if (carvedTests) {
    if (project.hasProperty('testName')) {
        def testName = project.getProperty('testName')
        println ""
        println "* Processing Carved Test ${testName}"
        println ""

        carvedTestSrcDir = "src/carvedTest/${testName}"

        testReportPrefix = "${buildDir}/carvedTest/${testName}/testExecution"
        coverageReportPrefix = "${buildDir}/carvedTest/${testName}/coverage"
    }
}


android {

    // Change the src folder for carved tests
    sourceSets {
        test {
            if (carvedTests) {
                java.srcDirs = ["$carvedTestSrcDir"]
            }
        }
    }

    compileSdkVersion 26
    defaultConfig {
        applicationId "com.stvjuliengmail.smartmeds"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled jacocoEnabled.toBoolean()
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests.all {

            jvmArgs "-Xmx2g"

            // Nices output on the console/logs
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }

            test {
                //Get last path of default set path.
                def junitXmlTestTaskName = file("$reports.junitXml.destination").name
                def htmlTestTaskName = file("$reports.html.destination").name

                if (carvedTests) {
                    // Just use the same?
                    reports.junitXml.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                    reports.html.destination = file("$testReportPrefix/$junitXmlTestTaskName")
                }

                filter {
                    //specific test method
                    if (project.hasProperty('carvedTestsFilter')){
                        includeTestsMatching project.carvedTestsFilter
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'org.mockito:mockito-core:3.6.0'
    testImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.android.support:cardview-v7:26.1.0'
    // third party library for custom bottom nav bar
    compile 'com.github.ittianyu:BottomNavigationViewEx:1.2.4'
}
